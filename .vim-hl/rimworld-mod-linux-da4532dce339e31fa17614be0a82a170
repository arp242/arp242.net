<span class="Type">namespace</span> Verse.AI {
    <span class="Type">public</span> <span class="Type">class</span> <span class="Type">Pawn_MindState </span><span class="Statement">:</span> IExposable {
        <span class="Comment">// [..]</span>

        <span class="Type">public</span> <span class="Type">void</span> MindStateTick() {
            <span class="Comment">// [..]</span>

            <span class="Statement">if</span> (Find.TickManager.TicksGame % <span class="Constant">123</span> <span class="Statement">==</span> <span class="Constant">0</span> <span class="Statement">&amp;&amp;</span>
                pawn.Spawned <span class="Statement">&amp;&amp;</span> pawn.RaceProps.IsFlesh <span class="Statement">&amp;&amp;</span> pawn.needs.mood <span class="Statement">!=</span> <span class="Constant">null</span>
            ) {
                TerrainDef terrain <span class="Statement">=</span> pawn.Position.GetTerrain(pawn.Map);
                <span class="Statement">if</span> (terrain.traversedThought <span class="Statement">!=</span> <span class="Constant">null</span>) {
                    pawn.needs.mood.thoughts.memories.TryGainMemoryFast(terrain.traversedThought);
                }

                WeatherDef curWeatherLerped <span class="Statement">=</span> pawn.Map.weatherManager.CurWeatherLerped;
                <span class="Statement">if</span> (curWeatherLerped.exposedThought <span class="Statement">!=</span> <span class="Constant">null</span> <span class="Statement">&amp;&amp;</span> <span class="Statement">!</span>pawn.Position.Roofed(pawn.Map)) {
                    pawn.needs.mood.thoughts.memories.TryGainMemoryFast(curWeatherLerped.exposedThought);
                }
            }

            <span class="Comment">// [..]</span>
        }
    }
}
